import json
import numpy as np
import faiss
import os
import argparse

parser = argparse.ArgumentParser(description="–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç —è–∫–æ—Ä–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–∞ –∏–∑ .jsonl —Ñ–∞–π–ª–∞")
parser.add_argument("--input", default="anchor_vectors.jsonl", help="–ü—É—Ç—å –∫ .jsonl —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏")
parser.add_argument("--output", default="anchor.index", help="–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É FAISS –∏–Ω–¥–µ–∫—Å—É")
args = parser.parse_args()

VECTORS_PATH = args.input
INDEX_PATH = args.output


def build_faiss_index():
    if not os.path.exists(VECTORS_PATH):
        raise FileNotFoundError(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª {VECTORS_PATH}. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ anchor_builder.py")

    with open(VECTORS_PATH, "r", encoding="utf-8") as f:
        data = [json.loads(line) for line in f]

    if not data:
        raise ValueError("‚ùå –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –≤ anchor_builder.py")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    embeddings = np.array([entry["vector"] for entry in data]).astype("float32")

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è cosine similarity
    norms = np.linalg.norm(embeddings, axis=1, keepdims=True)
    if np.any(norms == 0):
        raise ValueError("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —ç–º–±–µ–¥–¥–∏–Ω–≥ —Å –Ω—É–ª–µ–≤–æ–π –Ω–æ—Ä–º–æ–π. –í–æ–∑–º–æ–∂–Ω–æ, –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.")
    normalized_embeddings = embeddings / norms

    dim = normalized_embeddings.shape[1]
    print(f"üìê –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {dim}")
    print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len(normalized_embeddings)}")

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å –Ω–∞ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
    index = faiss.IndexFlatIP(dim)
    index.add(normalized_embeddings)

    faiss.write_index(index, INDEX_PATH)
    print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {INDEX_PATH}")

if __name__ == "__main__":
    build_faiss_index()
